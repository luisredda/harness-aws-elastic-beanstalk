harnessApiVersion: '1.0'
type: SHELL_SCRIPT
scriptString: "export VERSION_LABEL=${VERSION}\nexport AWS_DEFAULT_REGION=${infra.custom.vars.Region}\n\
  AWS_STS_ROLE=${infra.custom.vars.stsRole}\nNAME=\"Harness-Assume-Role\"\n\nif [\
  \ ! -z \"$AWS_STS_ROLE\" ]; then\n  echo \"Assuming STS Role...\"\n\n# Clear out\
  \ existing AWS session environment\n  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY\
  \ AWS_SESSION_TOKEN AWS_SECURITY_TOKEN\n\n  unset AWS_ACCESS_KEY AWS_SECRET_KEY\
  \ AWS_DELEGATION_TOKEN\n\n  KST=(`aws sts assume-role --role-arn \"$AWS_STS_ROLE\"\
  \ \\\n                          --role-session-name \"$NAME\" \\\n             \
  \             --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]'\
  \ \\\n--output text`)\n\n  export AWS_ACCESS_KEY_ID=${KST[0]}\n  export AWS_SECRET_ACCESS_KEY=${KST[1]}\n\
  \  export AWS_SESSION_TOKEN=${KST[2]}\n\nelse\n   echo \"Skipping STS AssumeRole...\"\
  \nfi\n\n\nAPP_STATUS=`echo ${APP_INFO}  | jq '.Environments[] | .Status' | sed -e\
  \ 's/^\"//' -e 's/\"$//'`\nAPP_HEALTHSTATUS=`echo ${APP_INFO}  | jq '.Environments[]\
  \ | .HealthStatus' | sed -e 's/^\"//' -e 's/\"$//'`\nAPP_HEALTH=`echo ${APP_INFO}\
  \  | jq '.Environments[] | .Health' | sed -e 's/^\"//' -e 's/\"$//'`\n\necho \"\
  Current APP Status: \" ${APP_STATUS}\necho \"Current APP Health Status\" ${APP_HEALTHSTATUS}\n\
  echo \"Current APP Health\" ${APP_HEALTH}\n   echo \"---\" \n   echo \"Latest environment\
  \ events ...\"\n\naws elasticbeanstalk describe-events  --environment-name ${infra.custom.vars.EnvironmentName}\
  \ --output text --query  'Events[*].[EventDate,Severity,Message]' | head -20\n\n\
  while [ \"$APP_STATUS\" != \"Ready\" ] ; do\n  APP_INFO=`aws elasticbeanstalk describe-environments\
  \ --environment-name ${infra.custom.vars.EnvironmentName}`\n  APP_STATUS=`echo ${APP_INFO}\
  \  | jq '.Environments[] | .Status' | sed -e 's/^\"//' -e 's/\"$//'`\n  echo \"\
  ---\"\n  echo \"Checking for Steady State...\"\n  echo \"Current APP Status: \"\
  \ ${APP_STATUS} \" - Desired: Ready \"\n  sleep 2\ndone\n\n# See if EB_APP_VERSION\
  \ is in the EB app\nNB_VERS=`aws elasticbeanstalk describe-applications --application-name\
  \ \"${service.name}\" | jq '.Applications[] | .Versions[]' | grep -c \"\\\"${VERSION_LABEL}\\\
  \"\"`\nif [ ${NB_VERS} = 0 ];then\n\techo \"No app version called \\\"${VERSION_LABEL}\\\
  \" in EB application \\\"${app.name}\\\".\"\n\texit 4\nfi\n\naws elasticbeanstalk\
  \ update-environment --environment-name ${infra.custom.vars.EnvironmentName} --version-label\
  \ ${VERSION_LABEL}"
scriptType: BASH
timeoutMillis: 600000
variables:
- name: VERSION
  value: ${artifact.fileName}
