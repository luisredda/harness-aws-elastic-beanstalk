harnessApiVersion: '1.0'
type: SSH
commandUnitType: OTHER
commandUnits:
- command: |
    export AWS_DEFAULT_REGION=${infra.custom.vars.Region}
    AWS_STS_ROLE=${infra.custom.vars.stsRole}
    NAME="Harness-Assume-Role"
    export VERSION_LABEL=${VERSION}

    if [ ! -z "$AWS_STS_ROLE" ]; then
      echo "Assuming STS Role..."

    # Unset existing AWS session keys
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN

      unset AWS_ACCESS_KEY AWS_SECRET_KEY AWS_DELEGATION_TOKEN

      KST=(`aws sts assume-role --role-arn "$AWS_STS_ROLE" \
                              --role-session-name "$NAME" \
                              --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' \
    --output text`)

      export AWS_ACCESS_KEY_ID=${KST[0]}
      export AWS_SECRET_ACCESS_KEY=${KST[1]}
      export AWS_SESSION_TOKEN=${KST[2]}

    else
       echo "Skipping STS AssumeRole..."
    fi
  commandUnitType: EXEC
  deploymentType: SSH
  name: Prepare
  scriptType: BASH
- command: |
    export AWS_DEFAULT_REGION=${infra.custom.vars.Region}
    AWS_STS_ROLE=${infra.custom.vars.stsRole}
    NAME="Harness-Assume-Role"
    export VERSION_LABEL=${VERSION}

    if [ ! -z "$AWS_STS_ROLE" ]; then
    echo "Assuming STS Role..."

    # Unset existing AWS session keys
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN

    unset AWS_ACCESS_KEY AWS_SECRET_KEY AWS_DELEGATION_TOKEN

    KST=(`aws sts assume-role --role-arn "$AWS_STS_ROLE" \
                              --role-session-name "$NAME" \
                              --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' \
    --output text`)

    export AWS_ACCESS_KEY_ID=${KST[0]}
    export AWS_SECRET_ACCESS_KEY=${KST[1]}
    export AWS_SESSION_TOKEN=${KST[2]}

    else
    echo "Skipping STS AssumeRole... Will use the current IAM role."
    fi

    VERSION_EXISTS=`aws elasticbeanstalk describe-application-versions --application-name=${service.name} --version-labels=${VERSION_LABEL} | jq -r '.ApplicationVersions' | jq length`

    if [ $VERSION_EXISTS -gt 0 ]; then
      echo "Version already exists, Harness skipping this step..."
    else

    echo "Creating EB app version ${VERSION_LABEL} in EB app \"${service.name}\" on region ${AWS_DEFAULT_REGION}"

    aws elasticbeanstalk create-application-version --application-name "${service.name}" --description "Version created by ${deploymentTriggeredBy} on Harness." \
     --version-label "${VERSION_LABEL}" --source-bundle S3Bucket=${artifact.bucketName},S3Key=${artifact.artifactPath}
    fi
  commandUnitType: EXEC
  deploymentType: SSH
  name: Create Version
  scriptType: BASH
- command: "export AWS_DEFAULT_REGION=${infra.custom.vars.Region}\nAWS_STS_ROLE=${infra.custom.vars.stsRole}\n\
    NAME=\"Harness-Assume-Role\"\nexport VERSION_LABEL=${VERSION}\n\nif [ ! -z \"\
    $AWS_STS_ROLE\" ]; then\necho \"Assuming STS Role...\"\n\n# Unset existing AWS\
    \ session keys\nunset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN\
    \ AWS_SECURITY_TOKEN\n\nunset AWS_ACCESS_KEY AWS_SECRET_KEY AWS_DELEGATION_TOKEN\n\
    \nKST=(`aws sts assume-role --role-arn \"$AWS_STS_ROLE\" \\\n                \
    \          --role-session-name \"$NAME\" \\\n                          --query\
    \ '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]'\
    \ \\\n--output text`)\n\nexport AWS_ACCESS_KEY_ID=${KST[0]}\nexport AWS_SECRET_ACCESS_KEY=${KST[1]}\n\
    export AWS_SESSION_TOKEN=${KST[2]}\n\nelse\necho \"Skipping STS AssumeRole...\"\
    \nfi\n\n# See if EB_APP_VERSION is in the EB app\nNB_VERS=`aws elasticbeanstalk\
    \ describe-applications --application-name \"${service.name}\" | jq '.Applications[]\
    \ | .Versions[]' | grep -c \"\\\"${VERSION_LABEL}\\\"\"`\nif [ ${NB_VERS} = 0\
    \ ];then\n\techo \"No app version called \\\"${VERSION_LABEL}\\\" in EB application\
    \ \\\"${EB_APP}\\\".\"\n\texit 4\nfi\n\naws elasticbeanstalk update-environment\
    \ --environment-name ${infra.custom.vars.EnvironmentName} --version-label ${VERSION_LABEL}"
  commandUnitType: EXEC
  deploymentType: SSH
  name: Update Environment
  scriptType: BASH
- command: |-
    export AWS_DEFAULT_REGION=${infra.custom.vars.Region}
    AWS_STS_ROLE=${infra.custom.vars.stsRole}
    NAME="Harness-Assume-Role"
    export VERSION_LABEL=${VERSION}

    if [ ! -z "$AWS_STS_ROLE" ]; then
    echo "Assuming STS Role..."

    # Unset existing AWS session keys
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN

    unset AWS_ACCESS_KEY AWS_SECRET_KEY AWS_DELEGATION_TOKEN

    KST=(`aws sts assume-role --role-arn "$AWS_STS_ROLE" \
                              --role-session-name "$NAME" \
                              --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' \
    --output text`)

    export AWS_ACCESS_KEY_ID=${KST[0]}
    export AWS_SECRET_ACCESS_KEY=${KST[1]}
    export AWS_SESSION_TOKEN=${KST[2]}

    else
    echo "Skipping STS AssumeRole..."
    fi
    #######
    echo "Checking for Steady State..."
    APP_INFO=`aws elasticbeanstalk describe-environments --environment-name ${infra.custom.vars.EnvironmentName}`
    APP_STATUS=`echo ${APP_INFO}  | jq '.Environments[] | .Status' | sed -e 's/^"//' -e 's/"$//'`
    APP_HEALTHSTATUS=`echo ${APP_INFO}  | jq '.Environments[] | .HealthStatus' | sed -e 's/^"//' -e 's/"$//'`
    APP_HEALTH=`echo ${APP_INFO}  | jq '.Environments[] | .Health' | sed -e 's/^"//' -e 's/"$//'`

    echo "Current APP Status: " ${APP_STATUS}
    echo "Current APP Health Status" ${APP_HEALTHSTATUS}
    echo "Current APP Health" ${APP_HEALTH}

    while [ "$APP_STATUS" != "Ready" ] || [ "$APP_HEALTHSTATUS" != "Ok" ] || [ "$APP_HEALTH" != "Green" ]; do
      APP_INFO=`aws elasticbeanstalk describe-environments --environment-name ${infra.custom.vars.EnvironmentName}`
      APP_STATUS=`echo ${APP_INFO}  | jq '.Environments[] | .Status' | sed -e 's/^"//' -e 's/"$//'`
      APP_HEALTHSTATUS=`echo ${APP_INFO}  | jq '.Environments[] | .HealthStatus' | sed -e 's/^"//' -e 's/"$//'`
      APP_HEALTH=`echo ${APP_INFO}  | jq '.Environments[] | .Health' | sed -e 's/^"//' -e 's/"$//'`
      echo "---"
      echo "Checking for Steady State..."
      echo "Current APP Status: " ${APP_STATUS} " - Desired: Ready "
      echo "Current APP Health Status" ${APP_HEALTHSTATUS} " - Desired: Ok"
      echo "Current APP Health" ${APP_HEALTH} " - Desired: Green"
      sleep 2
    done

    echo "------"
    echo ${APP_INFO}
  commandUnitType: EXEC
  deploymentType: SSH
  name: Steady State Check
  scriptType: BASH
variables:
- name: VERSION
  value: ${artifact.fileName}
